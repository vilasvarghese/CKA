#Create a node that has an SSD and label it as such.
Create a pod that is only scheduled on SSD nodes.
	
	apiVersion: v1
	kind: Pod
	metadata:
	  name: ssd-only-pod
	spec:
	  containers:
	  - name: my-container
		image: your-registry/your-image:latest
		# ... other container specifications ...
	  nodeSelector:
		storage-type: ssd
	

Create 2 pod definitions: 
	the second pod should be scheduled to run anywhere the first pod is running - 
	2nd pod runs alongside the first pod.
Create a deployment running nginx version 1.12.2 that will run in 2 pods
	Scale this to 4 pods.
	Scale it back to 2 pods.
	Upgrade this to 1.13.8
	Check the status of the upgrade
	How do you do this in a way that you can see the history of what happened?
	Undo the upgrade
	Expose the service on port 80
Create a pod that uses a scratch disk.
Change the pod to mount a path on the host.
Taint a node and run a Jenkins Pod on that specified node only.
Create a pod that has a liveness check
Use the utility nslookup to look up the DNS records of the service and pod.
Find which Pod is taking max CPU
List all PersistentVolumes sorted by their name
Create a daemon set
Change the update strategy to do a rolling update but delaying 30 seconds between pod updates
Create a static pod
Create a busybox container without a manifest. Then edit the manifest.
Create a pod that uses secrets
Create a secret
Pull secrets from environment variables
Pull secrets from a volume
Dump the secrets out via kubectl to show it worked
Create a job that runs every 3 minutes and prints out the current time.
Create a job that runs 20 times, 5 containers at a time, and prints “Hello parallel world”
Create a horizontal autoscaling group that starts with 2 pods and scales when CPU usage is over 50%.
Create a custom resource definition - CRD
Display it in the API with curl
Create a networking policy such that only pods with the label access=granted can talk to it.
Create a nginx pod and attach this policy to it.
Create a busybox pod and attempt to talk to nginx - should be blocked
Attach the label to busybox and try again - should be allowed
Create a service that references an externalname - https://api.github.com/users/prabhatsharma
Test that this works from another pod
Create a pod that runs all processes as user 1000.
Create a namespace
Run a pod in the new namespace
Put memory limits on the namespace
Limit pods to 2 persistent volumes in this namespace
Write an ingress rule that redirects calls to /foo to one service and to /bar to another
Write a service that exposes nginx on a nodeport
Change it to use a cluster port
Scale the service
Change it to use an external IP
Change it to use a load balancer
Deploy nginx with 3 replicas and then expose a port
Use port forwarding to talk to a specific port


Display all the pods sorted by start time
Create a pod that uses secrets
Create a secret
Pull secrets from environment variables
Pull secrets from a volume
Dump the secrets out via kubectl to show it worked
Create a job that runs every 3 minutes and prints out the current time.
Create a job that runs 20 times, 5 containers at a time, and prints “Hello parallel world”
Create a horizontal autoscaling group that starts with 2 pods and scales when CPU usage is over 50%.
Create a custom resource definition - CRD
Display it in the API with curl
Create a networking policy such that only pods with the label access=granted can talk to it.
Create a nginx pod and attach this policy to it.
Create a busybox pod and attempt to talk to nginx - should be blocked
Attach the label to busybox and try again - should be allowed
Create a service that references an externalname.
Test that this works from another pod
Create a pod that runs all processes as user 1000.
Create a namespace
Run a pod in the new namespace
Put memory limits on the namespace
Limit pods to 2 persistent volumes in this namespace
Write an ingress rule that redirects calls to /foo to one service and to /bar to another
Write a service that exposes nginx on a nodeport
Change it to use a cluster port
Scale the service
Change it to use an external IP
Change it to use a load balancer
Deploy nginx with 3 replicas and then expose a port
Use port forwarding to talk to a specific port
Make an API call using CURL and proper certs
Join a new node to cluster
Rotate certificates
Taint a node and un-taint it
Restart kubelet
Configure the cluster to use 8.8.8.8 and 8.8.4.4 as upstream DNS servers.
Create a pod with nginx and place a file using an init container that creates a simple index.html file with content - “created by init container”
You have a Container with a volume mount. Add an init container that creates an empty file in the volume. (the only trick is to mount the volume to 1. init-container as well)
Backup an etcd cluster
List the members of an etcd cluster
Find the health of etcd

More questions
	https://www.examtopics.com/exams/cncf/cka/view/
	https://www.itexams.com/exam/CKA
	https://github.com/alijahnas/CKA-practice-exercises?tab=readme-ov-file
	https://k21academy.com/docker-kubernetes/cka-ckad-exam-questions-answers/
	https://github.com/devopshubproject/cka-lab